package com.playmonumenta.plugins.utils;

import java.util.List;

import org.bukkit.Location;
import org.bukkit.Material;
import org.bukkit.block.Block;
import org.bukkit.block.Chest;
import org.bukkit.entity.Item;
import org.bukkit.entity.Player;
import org.bukkit.inventory.ItemStack;

import com.playmonumenta.plugins.utils.ItemUtils.ItemDeathResult;

import net.md_5.bungee.api.ChatColor;

public class GraveUtils {

	// An item entity should be destroyed. Determine what to do with it before destroying it.
	// If this method returns false, it means the item was not explicitly destroyed. It might still be destroyed by the code that called this method.
	public static void destroyItemEntity(Item entity) {
		ItemStack item = entity.getItemStack();
		ItemDeathResult result = ItemUtils.getItemDeathResult(item);
		if (result == ItemDeathResult.SAFE || (result == ItemDeathResult.SHATTER || result == ItemDeathResult.SHATTER_NOW)
				&& entity.getScoreboardTags().contains("PlayerDeath")) {
			Location location = null;
			String username = null;
			// Item contains Player Death data, extract that data into variables
			for (String tag : entity.getScoreboardTags()) {
				String[] data = tag.split(";");
				if (data.length > 1) {
					if (data[0].equals("PlayerDeathLocation") && data.length >= 4) {
						int x = Integer.parseInt((data[1]));
						int y = Math.max(Integer.parseInt(data[2]), 0);
						int z = Integer.parseInt(data[3]);
						location = new Location(entity.getWorld(), x, y, z);
					} else if (data[0].equals("PlayerDeathUsername") && data.length >= 2) {
						username = data[1];
					}
				}
			}
			// We need to know where to place the grave, and who owns the grave
			if (location != null && username != null) {
				Player player = null;
				Chest grave = null;

				// If the player is still in this world, save them to a variable so we can send messages to them later.
				// TODO: [MED] Make sure the player is found even if they changed shards.
				for (Player p : entity.getWorld().getPlayers()) {
					if (p.getName().equals(username)) {
						player = p;
					}
				}
				List<Chest> nearbyChests = LocationUtils.getNearbyChests(location, 10);
				for (Chest chest : nearbyChests) {
					// Look for a nearby grave that isn't full of items.
					if (isGraveOfPlayer(chest, username) && chest.getInventory().firstEmpty() != -1) {
						grave = chest;
						break;
					}
				}
				// If there isn't a grave nearby with space for items, generate a new grave in the nearest air or water block.
				if (grave == null) {
					Location emptySpace = LocationUtils.getNearestBlock(location, 10, Material.AIR, Material.CAVE_AIR, Material.WATER);
					if (emptySpace != null) {
						Block block = emptySpace.getBlock();
						block.setType(Material.CHEST);
						grave = (Chest) block.getState();
						grave.setCustomName(String.format("%s%s%s's Grave", ChatColor.DARK_RED, ChatColor.BOLD, username));
						grave.update();
						// Send the player a message letting them know a grave was generated.
						// This message is intentionally sent once per grave, so players know how many to look for (in the event they are some distance from each other)
						// TODO: [LOW] Change the message based on whether or not this was the first grave generated by this death.
						if (player == null) {
							// TODO: [LOW] If the player is offline, queue the message to be sent to them when they return.
						} else {
							// TODO: [MED] Add graves information to /deathhelp and edit this message to point users to the command.
							player.sendMessage(ChatColor.RED + "Some of your items were destroyed! They have been shattered and placed in a chest near where they were dropped.");
						}
					}
				}
				if (grave != null) {
					// Item is being placed in a grave, shatter it if it should be shattered.
					if (result == ItemDeathResult.SHATTER) {
						ItemUtils.shatterItem(item);
					}
					grave.getInventory().addItem(item);
				}
			}
		}

		entity.remove();
	}

	public static void setGraveScoreboard(Item item, Player player, Location location) {
		item.addScoreboardTag("PlayerDeath");
		item.addScoreboardTag(String.format("PlayerDeathLocation;%d;%d;%d", location.getBlockX(), location.getBlockY(), location.getBlockZ()));
		item.addScoreboardTag(String.format("PlayerDeathUsername;%s", player.getName()));
	}

	// Check if a block is a grave
	public static boolean isGrave(Block block) {
		return block != null && block.getState() instanceof Chest && isGrave((Chest) block.getState());
	}

	// Check if a chest is a grave
	public static boolean isGrave(Chest chest) {
		return chest != null && chest.getCustomName() != null && chest.getCustomName().toLowerCase().endsWith("'s grave");
	}

	// Check if a block is a player's grave
	public static boolean isGraveOfPlayer(Block block, Player player) {
		return block != null && player != null && block.getState() instanceof Chest && isGraveOfPlayer((Chest)block.getState(), player.getName());
	}

	// Check if a block is a player's grave via username
	public static boolean isGraveOfPlayer(Block block, String username) {
		return block != null && username != null && block.getState() instanceof Chest && isGraveOfPlayer((Chest)block.getState(), username);
	}

	// Check if a chest is a player's grave
	public static boolean isGraveOfPlayer(Chest chest, Player player) {
		return chest != null && player != null && isGraveOfPlayer(chest, player.getName());
	}

	// Check if a chest is a player's grave via username
	public static boolean isGraveOfPlayer(Chest chest, String username) {
		return chest != null && username != null && chest.getCustomName() != null && ChatColor.stripColor(chest.getCustomName()).toLowerCase().equals(username.toLowerCase() + "'s grave");
	}

	// Check if a player can open a grave. You should run isGrave() first.
	public static boolean canPlayerOpenGrave(Block block, Player player) {
		return block != null && player != null && block.getState() instanceof Chest && canPlayerOpenGrave((Chest)block.getState(), player.getName());
	}

	// Check if a player can open a grave. You should run isGrave() first.
	public static boolean canPlayerOpenGrave(Block block, String username) {
		return block != null && username != null && block.getState() instanceof Chest && canPlayerOpenGrave((Chest)block.getState(), username);
	}

	// Check if a player can open a grave. You should run isGrave() first.
	public static boolean canPlayerOpenGrave(Chest chest, Player player) {
		return chest != null && player != null && canPlayerOpenGrave(chest, player.getName());
	}

	// Check if a player can open a grave. You should run isGrave() first.
	public static boolean canPlayerOpenGrave(Chest chest, String username) {
		// TODO come up with a system to determine who is allowed to open a player's grave.
		// For now, only the grave's owner can open the grave.
		return isGraveOfPlayer(chest, username);
	}

}
